// language=JavaScript
/* eslint-disable */
// @ts-nocheck
// noinspection UnnecessaryLocalVariableJS
const generatedParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Top: peg$parseTop },
        peg$startRuleFunction  = peg$parseTop,

        peg$c0 = function() {return null;},
        peg$c1 = function(body) {const items=Array.isArray(body)?body.map(i=>i&&i.kind?i:void 0).filter(i=>void 0!==i):body;return 1===items.length?items[0]:items;},
        peg$c2 = /^[\-a-zA-Z \t']/,
        peg$c3 = peg$classExpectation(["-", ["a", "z"], ["A", "Z"], " ", "\t", "'"], false, false),
        peg$c4 = /^[ -!,#-\u26FF]/,
        peg$c5 = peg$classExpectation([[" ", "!"], ",", ["#", "\u26FF"]], false, false),
        peg$c6 = /^[\t ]/,
        peg$c7 = peg$classExpectation(["\t", " "], false, false),
        peg$c8 = /^[\n,]/,
        peg$c9 = peg$classExpectation(["\n", ","], false, false),
        peg$c10 = function(newline) {return newline;},
        peg$c11 = function(newlines) {return toSpwItem({kind:"space"});},
        peg$c12 = /^[a-zA-Z]/,
        peg$c13 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c14 = "-",
        peg$c15 = peg$literalExpectation("-", false),
        peg$c16 = "_",
        peg$c17 = peg$literalExpectation("_", false),
        peg$c18 = /^[a-zA-Z0-9]/,
        peg$c19 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
        peg$c20 = function(head, line, chars) {return line+chars;},
        peg$c21 = function(head, tail) {return[...head,...tail].join("");},
        peg$c22 = "&",
        peg$c23 = peg$literalExpectation("&", false),
        peg$c24 = function(anchor) {return toSpwItem({kind:"anchor",key:anchor});},
        peg$c25 = function(head, anchor) {return anchor;},
        peg$c26 = function(head, tail) {return[head,...tail];},
        peg$c27 = function(phrase) {const p=phrase.reduce((r,e)=>[...r,...Array.isArray(e)?e:[e]],[]);return toSpwItem({kind:"phrase",key:p.map(r=>r.key).join(" "),body:p});},
        peg$c28 = /^[']/,
        peg$c29 = peg$classExpectation(["'"], false, false),
        peg$c30 = /^[\n]/,
        peg$c31 = peg$classExpectation(["\n"], false, false),
        peg$c32 = /^["]/,
        peg$c33 = peg$classExpectation(["\""], false, false),
        peg$c34 = function(body) {return body.join("");},
        peg$c35 = "\\",
        peg$c36 = peg$literalExpectation("\\", false),
        peg$c37 = function() {return'"';},
        peg$c38 = function(string) {return toSpwItem({kind:"string",key:string});},
        peg$c39 = "#",
        peg$c40 = peg$literalExpectation("#", false),
        peg$c41 = function(token, label) {return{token:token,label:label};},
        peg$c42 = function(components) {return toSpwItem({kind:"channel",...components});},
        peg$c43 = "?",
        peg$c44 = peg$literalExpectation("?", false),
        peg$c45 = function(components) {return toSpwItem({kind:"evaluation",...components});},
        peg$c46 = "~",
        peg$c47 = peg$literalExpectation("~", false),
        peg$c48 = function(components) {return toSpwItem({kind:"invocation",...components});},
        peg$c49 = "!",
        peg$c50 = peg$literalExpectation("!", false),
        peg$c51 = function(components) {return toSpwItem({kind:"performance",...components});},
        peg$c52 = "@",
        peg$c53 = peg$literalExpectation("@", false),
        peg$c54 = function(components) {return toSpwItem({kind:"perspective",...components});},
        peg$c55 = "{",
        peg$c56 = peg$literalExpectation("{", false),
        peg$c57 = function(token, anchor, description) {return{anchor:anchor,description:description};},
        peg$c58 = function(token, node) {return null;},
        peg$c59 = function(token, node) {return toSpwItem({key:[token,node.anchor.key].join("_"),...node,kind:"delimiter"});},
        peg$c60 = function(tok) {return toSpwItem({key:tok,label:null,kind:"delimiter"});},
        peg$c61 = "}",
        peg$c62 = peg$literalExpectation("}", false),
        peg$c63 = function(node, token) {return toSpwItem({key:[token,node.key].join("_"),anchor:null,kind:"delimiter"});},
        peg$c64 = function(items) {const entries=items.filter(e=>null!=e),key=items.map(e=>e&&e.key).filter(Boolean).join(", ");return toSpwItem({kind:"node-body",key:key,entries:entries});},
        peg$c65 = function(open) {return null;},
        peg$c66 = function(open, underscore) {return underscore;},
        peg$c67 = function(open, close) {return{open:open,close:close};},
        peg$c68 = function(open, body, close) {return{open:open,body:body,close:close};},
        peg$c69 = function(container) {const key=[container.open.key+(container.open.anchor?" ":""),(container.body||{}).key||"#",container.close.key].join("");return toSpwItem({...container,key:key,kind:"domain"});},
        peg$c70 = "[",
        peg$c71 = peg$literalExpectation("[", false),
        peg$c72 = "]",
        peg$c73 = peg$literalExpectation("]", false),
        peg$c74 = function(container) {const key=[container.open.key+(container.open.anchor?" ":""),(container.body||{}).key||"#",container.close.key].join("");return toSpwItem({...container,key:key,kind:"essence"});},
        peg$c75 = "<",
        peg$c76 = peg$literalExpectation("<", false),
        peg$c77 = ">",
        peg$c78 = peg$literalExpectation(">", false),
        peg$c79 = function(container) {const key=[container.open.key+(container.open.anchor?" ":""),(container.body||{}).key||"#",container.close.key].join("");return toSpwItem({...container,key:key,kind:"concept"});},
        peg$c80 = "(",
        peg$c81 = peg$literalExpectation("(", false),
        peg$c82 = ")",
        peg$c83 = peg$literalExpectation(")", false),
        peg$c84 = function(container) {const key=[container.open.key+(container.open.anchor?" ":""),(container.body||{}).key||"#",container.close.key].join("");return toSpwItem({...container,key:key,kind:"group"});},
        peg$c85 = "=>",
        peg$c86 = peg$literalExpectation("=>", false),
        peg$c87 = function(head, transport, tail) {return toSpwItem({kind:"strand-tail",tail:tail,transport:transport,key:transport+tail.key});},
        peg$c88 = function(head, tails) {return toSpwItem({kind:"strand",head:head,tails:tails,key:[head.key,tails.map(a=>a.key).join("")].join("")});},
        peg$c89 = function(head, tail) {return tail;},
        peg$c90 = function(head, tail) {var items=[head,...tail];return toSpwItem({kind:"phrase_expression",items:items,key:items.map(e=>e&&e.key||!1).filter(Boolean).join(" ")});},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseTop() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDomainNode();
          if (s2 === peg$FAILED) {
            s2 = peg$parseEssentialNode();
            if (s2 === peg$FAILED) {
              s2 = peg$parseConceptNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseGroupNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseLabeledAtom();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsePureAtom();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseSpace();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c0();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseStrandExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePhraseExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parseDomainNode();
            if (s2 === peg$FAILED) {
              s2 = peg$parseEssentialNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseConceptNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseGroupNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseLabeledAtom();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsePureAtom();
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseSpace();
                        if (s3 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c0();
                        }
                        s2 = s3;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeWithoutQuotes() {
      var s0;

      var key    = peg$currPos * 31 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (peg$c2.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c4.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSpace() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = [];
      if (peg$c6.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (peg$c8.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c10(s4);
        }
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c10(s4);
            }
            s3 = s4;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = [];
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c10(s4);
            }
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (peg$c8.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c10(s4);
                }
                s3 = s4;
              }
            }
          } else {
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAnchor() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 31 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
        }
        if (s5 !== peg$FAILED) {
          if (peg$c18.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c20(s2, s5, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c17); }
              }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c18.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c20(s2, s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c21(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c12.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c18.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c18.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c21(s2, s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 38) {
            s1 = peg$c22;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePhrase() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 31 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseAnchor();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseAnchor();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c25(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c6.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAnchor();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c25(s2, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c26(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseStringNode() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 31 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c28.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseUnicodeWithoutQuotes();
        if (s4 === peg$FAILED) {
          if (peg$c30.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s4 === peg$FAILED) {
            if (peg$c32.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseUnicodeWithoutQuotes();
          if (s4 === peg$FAILED) {
            if (peg$c30.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c31); }
            }
            if (s4 === peg$FAILED) {
              if (peg$c32.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c34(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$c32.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s5 = peg$c35;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$c32.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c37();
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseUnicodeWithoutQuotes();
            if (s4 === peg$FAILED) {
              if (peg$c30.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s4 === peg$FAILED) {
                if (peg$c28.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
              }
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c32.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c37();
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parseUnicodeWithoutQuotes();
              if (s4 === peg$FAILED) {
                if (peg$c30.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s4 === peg$FAILED) {
                  if (peg$c28.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c32.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c34(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePureAtom() {
      var s0;

      var key    = peg$currPos * 31 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parsePhrase();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStringNode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAnchor();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseChannelNode() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c39;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c41(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c39;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c42(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEvaluationNode() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s2 = peg$c43;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c41(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s1 = peg$c43;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInvocationNode() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c46;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c41(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePerformanceNode() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c49;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c41(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c49;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePerspectiveNode() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 31 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c52;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchor();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c41(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c52;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseLabeledAtom() {
      var s0;

      var key    = peg$currPos * 31 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$parseChannelNode();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEvaluationNode();
        if (s0 === peg$FAILED) {
          s0 = peg$parseInvocationNode();
          if (s0 === peg$FAILED) {
            s0 = peg$parsePerformanceNode();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePerspectiveNode();
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainNodeOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c55;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchor();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomainNode();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssentialNode();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConceptNode();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroupNode();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomainNode();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssentialNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConceptNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroupNode();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c58(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c55;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainNodeClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAnchor();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c61;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 125) {
          s1 = peg$c61;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainNodeBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLabeledAtom();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePureAtom();
            if (s2 === peg$FAILED) {
              s2 = peg$parseDomainNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseEssentialNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseConceptNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseGroupNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseSpace();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c0();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStrandExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePhraseExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parseLabeledAtom();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePureAtom();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseDomainNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseEssentialNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseConceptNode();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseGroupNode();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseSpace();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c0();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainNode() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDomainNodeOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c65(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c66(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c65(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c65(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c66(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c8.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c65(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDomainNodeClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c67(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseDomainNodeOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDomainNodeBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDomainNodeClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c68(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c69(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssentialNodeOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchor();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomainNode();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssentialNode();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConceptNode();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroupNode();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomainNode();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssentialNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConceptNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroupNode();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c58(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c70;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssentialNodeClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAnchor();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c72;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 93) {
          s1 = peg$c72;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssentialNodeBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLabeledAtom();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePureAtom();
            if (s2 === peg$FAILED) {
              s2 = peg$parseDomainNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseEssentialNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseConceptNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseGroupNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseSpace();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c0();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStrandExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePhraseExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parseLabeledAtom();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePureAtom();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseDomainNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseEssentialNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseConceptNode();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseGroupNode();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseSpace();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c0();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssentialNode() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseEssentialNodeOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c65(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c66(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c65(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c65(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c66(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c8.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c65(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEssentialNodeClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c67(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseEssentialNodeOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEssentialNodeBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEssentialNodeClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c68(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c74(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptNodeOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c75;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchor();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomainNode();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssentialNode();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConceptNode();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroupNode();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomainNode();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssentialNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConceptNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroupNode();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c58(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c75;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptNodeClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAnchor();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c77;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 62) {
          s1 = peg$c77;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptNodeBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLabeledAtom();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePureAtom();
            if (s2 === peg$FAILED) {
              s2 = peg$parseDomainNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseEssentialNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseConceptNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseGroupNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseSpace();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c0();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStrandExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePhraseExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parseLabeledAtom();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePureAtom();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseDomainNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseEssentialNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseConceptNode();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseGroupNode();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseSpace();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c0();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptNode() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseConceptNodeOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c65(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c66(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c65(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c65(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c66(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c8.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c65(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseConceptNodeClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c67(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseConceptNodeOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseConceptNodeBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConceptNodeClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c68(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c79(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupNodeOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c80;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchor();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomainNode();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssentialNode();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConceptNode();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroupNode();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomainNode();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssentialNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConceptNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroupNode();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c57(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c58(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c59(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c80;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupNodeClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseAnchor();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c16;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c82;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 41) {
          s1 = peg$c82;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c83); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60(s1);
        }
        s0 = s1;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupNodeBody() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 31 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parseLabeledAtom();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePureAtom();
            if (s2 === peg$FAILED) {
              s2 = peg$parseDomainNode();
              if (s2 === peg$FAILED) {
                s2 = peg$parseEssentialNode();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseConceptNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseGroupNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseSpace();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c0();
                      }
                      s2 = s3;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStrandExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePhraseExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parseLabeledAtom();
              if (s2 === peg$FAILED) {
                s2 = peg$parsePureAtom();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseDomainNode();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseEssentialNode();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseConceptNode();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseGroupNode();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseSpace();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c0();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupNode() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseGroupNodeOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c65(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c16;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c66(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c8.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c65(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c65(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c16;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c17); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c66(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c8.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c65(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseGroupNodeClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c67(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseGroupNodeOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGroupNodeBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseGroupNodeClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c68(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c84(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseStrandExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 31 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parsePhraseExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parseLabeledAtom();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePureAtom();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSpace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSpace();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseSpace();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseSpace();
          }
          if (s5 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c85) {
              s6 = peg$c85;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$parseSpace();
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseSpace();
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseDomainNode();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseEssentialNode();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parseConceptNode();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseGroupNode();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseLabeledAtom();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsePureAtom();
                        }
                      }
                    }
                  }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c87(s1, s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parseSpace();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseSpace();
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c85) {
                  s6 = peg$c85;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c86); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parseSpace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parseSpace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseDomainNode();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseEssentialNode();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parseConceptNode();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parseGroupNode();
                          if (s8 === peg$FAILED) {
                            s8 = peg$parseLabeledAtom();
                            if (s8 === peg$FAILED) {
                              s8 = peg$parsePureAtom();
                            }
                          }
                        }
                      }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c87(s1, s6, s8);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c88(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePhraseExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 31 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$parseDomainNode();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEssentialNode();
        if (s1 === peg$FAILED) {
          s1 = peg$parseConceptNode();
          if (s1 === peg$FAILED) {
            s1 = peg$parseGroupNode();
            if (s1 === peg$FAILED) {
              s1 = peg$parseLabeledAtom();
              if (s1 === peg$FAILED) {
                s1 = peg$parsePureAtom();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c6.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDomainNode();
          if (s5 === peg$FAILED) {
            s5 = peg$parseEssentialNode();
            if (s5 === peg$FAILED) {
              s5 = peg$parseConceptNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseGroupNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseLabeledAtom();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsePureAtom();
                  }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c89(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            if (peg$c6.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c6.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDomainNode();
              if (s5 === peg$FAILED) {
                s5 = peg$parseEssentialNode();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseConceptNode();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseGroupNode();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseLabeledAtom();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parsePureAtom();
                      }
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c89(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c90(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    const _cache = new Map();

                         function normalize(node) {
                             return {
                                 key: text(),
                                 ...Object
                                     .fromEntries(
                                         Object
                                             .entries(node)
                                             .filter(([k, v]) => k === 'key' ? true : v !== undefined)
                                     ),
                                 src:      text(),
                                 location: location()
                             };
                         }

                         function toSpwItem(node) {
                             if (!node.kind) throw new Error('No node kind specified')
                             var cacheKey = JSON.stringify(location());
                             if (_cache.has(cacheKey)) return _cache.get(cacheKey);

                             const out = normalize(node);
                             _cache.set(cacheKey, out);
                             switch (out.kind) {
                                 case 'channel':
                                 case 'evaluation':
                                 case 'invocation':
                                 case 'performance':
                                 case 'perspective':

                                 case 'string':
                                 case 'anchor':
                                 case 'anchor':
                                 case 'phrase':

                                 case 'domain':
                                 case 'group':
                                 case 'essence':
                                 case 'concept':

                                 case 'strand':
                                 case 'phrase_expression':

                                 case 'strand-tail':
                                 case 'node-body':
                                 case 'delimiter':
                                 case 'space':
                                     return out;
                                 default:
                                     console.error('No handler for ' + out.kind);
                                     out ? (out.kind = out.kind || 'unknown') : null;
                                     throw new Error();
                             }
                         }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
export default generatedParser;
export {generatedParser as spwParser};