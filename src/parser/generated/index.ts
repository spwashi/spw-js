// language=JavaScript
/* eslint-disable */
// @ts-nocheck
// noinspection UnnecessaryLocalVariableJS
const generatedParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Top: peg$parseTop },
        peg$startRuleFunction  = peg$parseTop,

        peg$c0 = peg$otherExpectation("Top"),
        peg$c1 = function() {return null;},
        peg$c2 = function(body) {const items=Array.isArray(body)?body.map(i=>i&&i.kind?i:void 0).filter(i=>void 0!==i):body;return 1===items.length?items[0]:items;},
        peg$c3 = peg$otherExpectation("UnicodeWithoutQuotes"),
        peg$c4 = /^[\-a-zA-Z \t']/,
        peg$c5 = peg$classExpectation(["-", ["a", "z"], ["A", "Z"], " ", "\t", "'"], false, false),
        peg$c6 = /^[ -!,#-\u26FF]/,
        peg$c7 = peg$classExpectation([[" ", "!"], ",", ["#", "\u26FF"]], false, false),
        peg$c8 = peg$otherExpectation("Space"),
        peg$c9 = /^[\t ]/,
        peg$c10 = peg$classExpectation(["\t", " "], false, false),
        peg$c11 = /^[\n]/,
        peg$c12 = peg$classExpectation(["\n"], false, false),
        peg$c13 = function(newline) {return newline;},
        peg$c14 = function(newlines) {return constructs.space();},
        peg$c15 = peg$otherExpectation("Node"),
        peg$c16 = peg$otherExpectation("ContainerNode"),
        peg$c17 = peg$otherExpectation("DomainOpen"),
        peg$c18 = "{",
        peg$c19 = peg$literalExpectation("{", false),
        peg$c20 = "_",
        peg$c21 = peg$literalExpectation("_", false),
        peg$c22 = function(token, anchor, description) {return{anchor:anchor,description:description};},
        peg$c23 = function(token, node) {return null;},
        peg$c24 = function(token, node) {return toSpwItem({token:token,position:"open",label:node.anchor,description:node.description,kind:"domain_objective"});},
        peg$c25 = function(tok) {return toSpwItem({token:tok,position:"open",kind:"domain_objective"});},
        peg$c26 = peg$otherExpectation("DomainClose"),
        peg$c27 = "}",
        peg$c28 = peg$literalExpectation("}", false),
        peg$c29 = function(token, node) {return toSpwItem({token:token,position:"close",label:node,kind:"domain_subjective"});},
        peg$c30 = function(node, token) {return toSpwItem({token:token,position:"close",label:node,kind:"domain_subjective"});},
        peg$c31 = function(tok) {return toSpwItem({token:tok,position:"close",kind:"domain_subjective"});},
        peg$c32 = peg$otherExpectation("DomainBody"),
        peg$c33 = peg$otherExpectation("Domain"),
        peg$c34 = function(open) {return null;},
        peg$c35 = function(open, underscore) {return underscore;},
        peg$c36 = function(open, close) {return{open:open,close:close};},
        peg$c37 = function(open, body, close) {return{open:open,body:body,close:close};},
        peg$c38 = function(container) {return toSpwItem({kind:"domain",open:container.open,body:container.body,close:container.close});},
        peg$c39 = peg$otherExpectation("EssenceOpen"),
        peg$c40 = "[",
        peg$c41 = peg$literalExpectation("[", false),
        peg$c42 = function(token, node) {return toSpwItem({token:token,position:"open",label:node.anchor,description:node.description,kind:"essence_objective"});},
        peg$c43 = function(tok) {return toSpwItem({token:tok,position:"open",kind:"essence_objective"});},
        peg$c44 = peg$otherExpectation("EssenceClose"),
        peg$c45 = "]",
        peg$c46 = peg$literalExpectation("]", false),
        peg$c47 = function(token, node) {return toSpwItem({token:token,position:"close",label:node,kind:"essence_subjective"});},
        peg$c48 = function(node, token) {return toSpwItem({token:token,position:"close",label:node,kind:"essence_subjective"});},
        peg$c49 = function(tok) {return toSpwItem({token:tok,position:"close",kind:"essence_subjective"});},
        peg$c50 = peg$otherExpectation("EssenceBody"),
        peg$c51 = peg$otherExpectation("Essence"),
        peg$c52 = function(container) {return toSpwItem({kind:"essence",open:container.open,body:container.body,close:container.close});},
        peg$c53 = peg$otherExpectation("ConceptOpen"),
        peg$c54 = "<",
        peg$c55 = peg$literalExpectation("<", false),
        peg$c56 = function(token, node) {return toSpwItem({token:token,position:"open",label:node.anchor,description:node.description,kind:"concept_objective"});},
        peg$c57 = function(tok) {return toSpwItem({token:tok,position:"open",kind:"concept_objective"});},
        peg$c58 = peg$otherExpectation("ConceptClose"),
        peg$c59 = ">",
        peg$c60 = peg$literalExpectation(">", false),
        peg$c61 = function(token, node) {return toSpwItem({token:token,position:"close",label:node,kind:"concept_subjective"});},
        peg$c62 = function(node, token) {return toSpwItem({token:token,position:"close",label:node,kind:"concept_subjective"});},
        peg$c63 = function(tok) {return toSpwItem({token:tok,position:"close",kind:"concept_subjective"});},
        peg$c64 = peg$otherExpectation("ConceptBody"),
        peg$c65 = peg$otherExpectation("Concept"),
        peg$c66 = function(container) {return toSpwItem({kind:"concept",open:container.open,body:container.body,close:container.close});},
        peg$c67 = peg$otherExpectation("GroupOpen"),
        peg$c68 = "(",
        peg$c69 = peg$literalExpectation("(", false),
        peg$c70 = function(token, node) {return toSpwItem({token:token,position:"open",label:node.anchor,description:node.description,kind:"group_objective"});},
        peg$c71 = function(tok) {return toSpwItem({token:tok,position:"open",kind:"group_objective"});},
        peg$c72 = peg$otherExpectation("GroupClose"),
        peg$c73 = ")",
        peg$c74 = peg$literalExpectation(")", false),
        peg$c75 = function(token, node) {return toSpwItem({token:token,position:"close",label:node,kind:"group_subjective"});},
        peg$c76 = function(node, token) {return toSpwItem({token:token,position:"close",label:node,kind:"group_subjective"});},
        peg$c77 = function(tok) {return toSpwItem({token:tok,position:"close",kind:"group_subjective"});},
        peg$c78 = peg$otherExpectation("GroupBody"),
        peg$c79 = peg$otherExpectation("Group"),
        peg$c80 = function(container) {return toSpwItem({kind:"group",open:container.open,body:container.body,close:container.close});},
        peg$c81 = peg$otherExpectation("Atom"),
        peg$c82 = peg$otherExpectation("AnchorNode"),
        peg$c83 = /^[a-zA-Z]/,
        peg$c84 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c85 = "-",
        peg$c86 = peg$literalExpectation("-", false),
        peg$c87 = /^[a-zA-Z0-9]/,
        peg$c88 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
        peg$c89 = function(head, line, chars) {return line+chars.join("");},
        peg$c90 = function(head, tail) {return[...head,...tail].join("");},
        peg$c91 = function(head, tail) {const characters=[...head,...tail];return characters.join("");},
        peg$c92 = function(anchor) {return toSpwItem({kind:"anchor",label:anchor});},
        peg$c93 = peg$otherExpectation("NumberNode"),
        peg$c94 = /^[0-9]/,
        peg$c95 = peg$classExpectation([["0", "9"]], false, false),
        peg$c96 = function(num) {return toSpwItem({kind:"number",value:parseInt(num.join(""))});},
        peg$c97 = peg$otherExpectation("PhraseNode"),
        peg$c98 = function(head, anchor) {return anchor;},
        peg$c99 = function(head, tail) {const items=[head,...tail];return items;},
        peg$c100 = function(phrase) {function makeArray(r){return Array.isArray(r)?r:[r]}const _phrase=phrase,p=_phrase.reduce((r,e)=>[...r,...makeArray(e)],[]);return toSpwItem({kind:"phrase",body:p});},
        peg$c101 = peg$otherExpectation("StringNode"),
        peg$c102 = /^[']/,
        peg$c103 = peg$classExpectation(["'"], false, false),
        peg$c104 = /^["]/,
        peg$c105 = peg$classExpectation(["\""], false, false),
        peg$c106 = function(body) {return body.join("");},
        peg$c107 = "\\",
        peg$c108 = peg$literalExpectation("\\", false),
        peg$c109 = function() {return'"';},
        peg$c110 = function(string) {return toSpwItem({kind:"string",open:'"',body:string,close:'"'});},
        peg$c111 = peg$otherExpectation("Scalar"),
        peg$c112 = ".",
        peg$c113 = peg$literalExpectation(".", false),
        peg$c114 = function(node, spec) {return null;},
        peg$c115 = function(node, spec, container) {return container;},
        peg$c116 = function(node, spec, description) {return"undefined"!=typeof spec&&(node.key+=spec.map(e=>e.key),node.spec=spec),node;},
        peg$c117 = peg$otherExpectation("Operator"),
        peg$c118 = peg$otherExpectation("AggregationOperator"),
        peg$c119 = "+",
        peg$c120 = peg$literalExpectation("+", false),
        peg$c121 = function(token, label) {return{token:token,label:label};},
        peg$c122 = function(_operatorComponents) {return toSpwItem({kind:"aggregation",..._operatorComponents});},
        peg$c123 = peg$otherExpectation("AscentOperator"),
        peg$c124 = "^",
        peg$c125 = peg$literalExpectation("^", false),
        peg$c126 = function(_operatorComponents) {return toSpwItem({kind:"ascent",..._operatorComponents});},
        peg$c127 = peg$otherExpectation("BranchOperator"),
        peg$c128 = "|",
        peg$c129 = peg$literalExpectation("|", false),
        peg$c130 = function(_operatorComponents) {return toSpwItem({kind:"branch",..._operatorComponents});},
        peg$c131 = peg$otherExpectation("ChannelOperator"),
        peg$c132 = "#",
        peg$c133 = peg$literalExpectation("#", false),
        peg$c134 = function(_operatorComponents) {return toSpwItem({kind:"channel",..._operatorComponents});},
        peg$c135 = peg$otherExpectation("DescentOperator"),
        peg$c136 = function(_operatorComponents) {return toSpwItem({kind:"descent",..._operatorComponents});},
        peg$c137 = peg$otherExpectation("DirectionOperator"),
        peg$c138 = "->",
        peg$c139 = peg$literalExpectation("->", false),
        peg$c140 = function(_operatorComponents) {return toSpwItem({kind:"direction",..._operatorComponents});},
        peg$c141 = peg$otherExpectation("EvaluationOperator"),
        peg$c142 = "?",
        peg$c143 = peg$literalExpectation("?", false),
        peg$c144 = function(_operatorComponents) {return toSpwItem({kind:"evaluation",..._operatorComponents});},
        peg$c145 = peg$otherExpectation("InvocationOperator"),
        peg$c146 = "~",
        peg$c147 = peg$literalExpectation("~", false),
        peg$c148 = function(_operatorComponents) {return toSpwItem({kind:"invocation",..._operatorComponents});},
        peg$c149 = peg$otherExpectation("PerformanceOperator"),
        peg$c150 = "!",
        peg$c151 = peg$literalExpectation("!", false),
        peg$c152 = function(_operatorComponents) {return toSpwItem({kind:"performance",..._operatorComponents});},
        peg$c153 = peg$otherExpectation("PerspectiveOperator"),
        peg$c154 = "@",
        peg$c155 = peg$literalExpectation("@", false),
        peg$c156 = function(_operatorComponents) {return toSpwItem({kind:"perspective",..._operatorComponents});},
        peg$c157 = peg$otherExpectation("RangeOperator"),
        peg$c158 = "..",
        peg$c159 = peg$literalExpectation("..", false),
        peg$c160 = function(_operatorComponents) {return toSpwItem({kind:"range",..._operatorComponents});},
        peg$c161 = peg$otherExpectation("ReductionOperator"),
        peg$c162 = function(_operatorComponents) {return toSpwItem({kind:"reduction",..._operatorComponents});},
        peg$c163 = peg$otherExpectation("ReferenceOperator"),
        peg$c164 = "&",
        peg$c165 = peg$literalExpectation("&", false),
        peg$c166 = function(_operatorComponents) {return toSpwItem({kind:"reference",..._operatorComponents});},
        peg$c167 = peg$otherExpectation("SpreadOperator"),
        peg$c168 = "...",
        peg$c169 = peg$literalExpectation("...", false),
        peg$c170 = function(_operatorComponents) {return toSpwItem({kind:"spread",..._operatorComponents});},
        peg$c171 = peg$otherExpectation("TransformationOperator"),
        peg$c172 = "=>",
        peg$c173 = peg$literalExpectation("=>", false),
        peg$c174 = function(_operatorComponents) {return toSpwItem({kind:"transformation",..._operatorComponents});},
        peg$c175 = peg$otherExpectation("ValueOperator"),
        peg$c176 = "*",
        peg$c177 = peg$literalExpectation("*", false),
        peg$c178 = function(_operatorComponents) {return toSpwItem({kind:"value",..._operatorComponents});},
        peg$c179 = peg$otherExpectation("Expression"),
        peg$c180 = peg$otherExpectation("PerspectiveExpression"),
        peg$c181 = function(source) {return null;},
        peg$c182 = function(source, atom, spec) {return toSpwItem({kind:"lens",atom:atom,spec:spec});},
        peg$c183 = function(source, atom) {return{atom:atom};},
        peg$c184 = function(source, lens) {return null;},
        peg$c185 = function(source, lens, target) {return toSpwItem({kind:"perspective_expression",source:source,lens:lens,target:target});},
        peg$c186 = peg$otherExpectation("StrandExpression"),
        peg$c187 = function(head) {return null;},
        peg$c188 = function(head, operator) {return null;},
        peg$c189 = function(head, operator, item) {return toSpwItem({kind:"strand_tail",operator:operator,item:item});},
        peg$c190 = function(head, tails) {return toSpwItem({kind:"strand",head:head,tails:tails});},
        peg$c191 = peg$otherExpectation("PhraseExpression"),
        peg$c192 = function(head, tail) {return tail;},
        peg$c193 = function(head, tail) {return toSpwItem({kind:"phrase_expression",body:[head,...tail]});},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseTop() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 48 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseStrandExpression();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePhraseExpression();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePerspectiveExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parseDomain();
            if (s2 === peg$FAILED) {
              s2 = peg$parseEssence();
              if (s2 === peg$FAILED) {
                s2 = peg$parseConcept();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseGroup();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseOperator();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseScalar();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseDomainOpen();
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parseSpace();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c1();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseStrandExpression();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePhraseExpression();
            if (s2 === peg$FAILED) {
              s2 = peg$parsePerspectiveExpression();
              if (s2 === peg$FAILED) {
                s2 = peg$parseDomain();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseEssence();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseConcept();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseGroup();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseOperator();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseScalar();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseDomainOpen();
                            if (s2 === peg$FAILED) {
                              s2 = peg$currPos;
                              s3 = peg$parseSpace();
                              if (s3 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c1();
                              }
                              s2 = s3;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseUnicodeWithoutQuotes() {
      var s0, s1;

      var key    = peg$currPos * 48 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c6.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSpace() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = [];
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (peg$c11.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c13(s4);
        }
        s3 = s4;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c13(s4);
            }
            s3 = s4;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = [];
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c13(s4);
            }
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c9.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (peg$c11.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c13(s4);
                }
                s3 = s4;
              }
            }
          } else {
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNode() {
      var s0, s1;

      var key    = peg$currPos * 48 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parseDomain();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEssence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseConcept();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGroup();
            if (s0 === peg$FAILED) {
              s0 = peg$parseOperator();
              if (s0 === peg$FAILED) {
                s0 = peg$parseScalar();
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseContainerNode() {
      var s0, s1;

      var key    = peg$currPos * 48 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parseDomain();
      if (s0 === peg$FAILED) {
        s0 = peg$parseEssence();
        if (s0 === peg$FAILED) {
          s0 = peg$parseConcept();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGroup();
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchorNode();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomain();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssence();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConcept();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroup();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomain();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssence();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConcept();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroup();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c22(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c23(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c24(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c18;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 48 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c27;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAnchorNode();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c29(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAnchorNode();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c20;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s3 = peg$c27;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c30(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 125) {
          s1 = peg$c27;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomainBody() {
      var s0, s1, s2;

      var key    = peg$currPos * 48 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseStrandExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePhraseExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePerspectiveExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDomain();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEssence();
              if (s1 === peg$FAILED) {
                s1 = peg$parseConcept();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseGroup();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseOperator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseScalar();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseSpace();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s1;
                          s2 = peg$c1();
                        }
                        s1 = s2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseStrandExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePhraseExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePerspectiveExpression();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDomain();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseEssence();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseConcept();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseGroup();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseOperator();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseScalar();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseSpace();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c1();
                            }
                            s1 = s2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDomain() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseDomainOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c34(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c20;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c35(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c34(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c35(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c34(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDomainClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c36(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseDomainOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDomainBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseDomainClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c37(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssenceOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c40;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchorNode();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomain();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssence();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConcept();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroup();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomain();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssence();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConcept();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroup();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c22(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c23(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c42(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c40;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssenceClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 48 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 93) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAnchorNode();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c47(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAnchorNode();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c20;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s3 = peg$c45;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c48(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 93) {
          s1 = peg$c45;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssenceBody() {
      var s0, s1, s2;

      var key    = peg$currPos * 48 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseStrandExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePhraseExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePerspectiveExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDomain();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEssence();
              if (s1 === peg$FAILED) {
                s1 = peg$parseConcept();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseGroup();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseOperator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseScalar();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseSpace();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s1;
                          s2 = peg$c1();
                        }
                        s1 = s2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseStrandExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePhraseExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePerspectiveExpression();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDomain();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseEssence();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseConcept();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseGroup();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseOperator();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseScalar();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseSpace();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c1();
                            }
                            s1 = s2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEssence() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseEssenceOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c34(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c20;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c35(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c34(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c35(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c34(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEssenceClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c36(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseEssenceOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseEssenceBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEssenceClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c37(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c52(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c54;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchorNode();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomain();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssence();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConcept();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroup();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomain();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssence();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConcept();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroup();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c22(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c23(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c54;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c57(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 48 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAnchorNode();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAnchorNode();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c20;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c59;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c62(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 62) {
          s1 = peg$c59;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c63(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConceptBody() {
      var s0, s1, s2;

      var key    = peg$currPos * 48 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseStrandExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePhraseExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePerspectiveExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDomain();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEssence();
              if (s1 === peg$FAILED) {
                s1 = peg$parseConcept();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseGroup();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseOperator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseScalar();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseSpace();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s1;
                          s2 = peg$c1();
                        }
                        s1 = s2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseStrandExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePhraseExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePerspectiveExpression();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDomain();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseEssence();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseConcept();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseGroup();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseOperator();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseScalar();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseSpace();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c1();
                            }
                            s1 = s2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseConcept() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseConceptOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c34(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c20;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c35(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c34(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c35(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c34(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseConceptClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c36(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseConceptOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseConceptBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseConceptClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c37(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c66(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupOpen() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c68;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseAnchorNode();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDomain();
            if (s4 === peg$FAILED) {
              s4 = peg$parseEssence();
              if (s4 === peg$FAILED) {
                s4 = peg$parseConcept();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseGroup();
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseDomain();
            if (s5 === peg$FAILED) {
              s5 = peg$parseEssence();
              if (s5 === peg$FAILED) {
                s5 = peg$parseConcept();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseGroup();
                }
              }
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c22(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseSpace();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c23(s1, s3);
            }
            s4 = s5;
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c70(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c68;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c71(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupClose() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 48 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c73;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c20;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAnchorNode();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAnchorNode();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c20;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s3 = peg$c73;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c76(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 41) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c74); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c77(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroupBody() {
      var s0, s1, s2;

      var key    = peg$currPos * 48 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = [];
      s1 = peg$parseStrandExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePhraseExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parsePerspectiveExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDomain();
            if (s1 === peg$FAILED) {
              s1 = peg$parseEssence();
              if (s1 === peg$FAILED) {
                s1 = peg$parseConcept();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseGroup();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseOperator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseScalar();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseSpace();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s1;
                          s2 = peg$c1();
                        }
                        s1 = s2;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseStrandExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parsePhraseExpression();
            if (s1 === peg$FAILED) {
              s1 = peg$parsePerspectiveExpression();
              if (s1 === peg$FAILED) {
                s1 = peg$parseDomain();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseEssence();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseConcept();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseGroup();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseOperator();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseScalar();
                          if (s1 === peg$FAILED) {
                            s1 = peg$currPos;
                            s2 = peg$parseSpace();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s1;
                              s2 = peg$c1();
                            }
                            s1 = s2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseGroup() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseGroupOpen();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s4;
          s5 = peg$c34(s2);
        }
        s4 = s5;
        if (s4 === peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c20;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c35(s2, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c34(s2);
            }
            s4 = s5;
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s2);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c20;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c35(s2, s5);
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c34(s2);
              }
              s4 = s5;
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseGroupClose();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c36(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseGroupOpen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseGroupBody();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseGroupClose();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c37(s2, s3, s4);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c80(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAtom() {
      var s0, s1;

      var key    = peg$currPos * 48 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parseOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$parseScalar();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAnchorNode() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 48 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c83.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c83.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c85;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
        if (s5 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s5 = peg$c20;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          if (peg$c87.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              if (peg$c87.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c89(s2, s5, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c85;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c86); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s5 = peg$c20;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c21); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c87.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c88); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c87.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c89(s2, s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c90(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        if (peg$c83.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c83.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c87.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c87.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c88); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c91(s2, s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c92(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseNumberNode() {
      var s0, s1, s2;

      var key    = peg$currPos * 48 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c94.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c94.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c96(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePhraseNode() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 48 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseAnchorNode();
      if (s2 === peg$FAILED) {
        s2 = peg$parseNumberNode();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = [];
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c9.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseAnchorNode();
          if (s6 === peg$FAILED) {
            s6 = peg$parseNumberNode();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c98(s2, s6);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            if (peg$c9.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c9.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c10); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAnchorNode();
              if (s6 === peg$FAILED) {
                s6 = peg$parseNumberNode();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c98(s2, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c99(s2, s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseStringNode() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 48 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c102.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseUnicodeWithoutQuotes();
        if (s4 === peg$FAILED) {
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s4 === peg$FAILED) {
            if (peg$c104.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseUnicodeWithoutQuotes();
          if (s4 === peg$FAILED) {
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s4 === peg$FAILED) {
              if (peg$c104.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c102.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c106(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (peg$c104.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s5 = peg$c107;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c108); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$c104.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c109();
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseUnicodeWithoutQuotes();
            if (s4 === peg$FAILED) {
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s4 === peg$FAILED) {
                if (peg$c102.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c103); }
                }
              }
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s5 = peg$c107;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c104.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4;
                s5 = peg$c109();
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parseUnicodeWithoutQuotes();
              if (s4 === peg$FAILED) {
                if (peg$c11.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s4 === peg$FAILED) {
                  if (peg$c102.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c103); }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c104.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c105); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s1;
              s2 = peg$c106(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c110(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseScalar() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 48 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parsePhraseNode();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberNode();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseAnchorNode();
          if (s1 === peg$FAILED) {
            s1 = peg$parseStringNode();
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseContainerNode();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseContainerNode();
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c112;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c113); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseSpace();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c114(s1, s2);
                }
                s6 = s7;
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseContainerNode();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c115(s1, s2, s7);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                  s5 = peg$c112;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c113); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseSpace();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c114(s1, s2);
                  }
                  s6 = s7;
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseContainerNode();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c115(s1, s2, s7);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c116(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseOperator() {
      var s0, s1;

      var key    = peg$currPos * 48 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parseSpreadOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$parseRangeOperator();
        if (s0 === peg$FAILED) {
          s0 = peg$parseDescentOperator();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTransformationOperator();
            if (s0 === peg$FAILED) {
              s0 = peg$parseDirectionOperator();
              if (s0 === peg$FAILED) {
                s0 = peg$parseAggregationOperator();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAscentOperator();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseBranchOperator();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseChannelOperator();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseEvaluationOperator();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseInvocationOperator();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsePerformanceOperator();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsePerspectiveOperator();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseReductionOperator();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseReferenceOperator();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseValueOperator();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAggregationOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c119;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s1 = peg$c119;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c120); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c122(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseAscentOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s2 = peg$c124;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 94) {
          s1 = peg$c124;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c126(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseBranchOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c128;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 124) {
          s1 = peg$c128;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c129); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c130(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseChannelOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c132;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c132;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c133); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDescentOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 32,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c112;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c113); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c112;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c136(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseDirectionOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 33,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c138) {
        s2 = peg$c138;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c138) {
          s1 = peg$c138;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c140(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c137); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseEvaluationOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 34,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s2 = peg$c142;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s1 = peg$c142;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c144(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseInvocationOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 35,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c146;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 126) {
          s1 = peg$c146;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c148(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePerformanceOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 36,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c150;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s1 = peg$c150;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c151); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c149); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePerspectiveOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 37,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c154;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c154;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c155); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c156(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseRangeOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 38,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c158) {
        s2 = peg$c158;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c158) {
          s1 = peg$c158;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c160(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseReductionOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 39,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c85;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c85;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c86); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c162(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseReferenceOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 40,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 38) {
        s2 = peg$c164;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c165); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c164;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c166(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c163); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseSpreadOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 41,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c168) {
        s2 = peg$c168;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c168) {
          s1 = peg$c168;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c169); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c170(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseTransformationOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 42,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c172) {
        s2 = peg$c172;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c172) {
          s1 = peg$c172;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c173); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c174(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c171); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseValueOperator() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 48 + 43,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c176;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAnchorNode();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c121(s2, s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c176;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c178(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseExpression() {
      var s0, s1;

      var key    = peg$currPos * 48 + 44,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$parseStrandExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePhraseExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePerspectiveExpression();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePerspectiveExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 48 + 45,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseNode();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseSpace();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c181(s1);
        }
        s3 = s4;
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c181(s1);
          }
          s3 = s4;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsePerspectiveOperator();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEssence();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c182(s1, s4, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsePerspectiveOperator();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c183(s1, s4);
            }
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseSpace();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$c184(s1, s3);
            }
            s5 = s6;
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseSpace();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c184(s1, s3);
              }
              s5 = s6;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c138) {
                s5 = peg$c138;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c139); }
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parseSpace();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s7;
                  s8 = peg$c184(s1, s3);
                }
                s7 = s8;
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parseSpace();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c184(s1, s3);
                  }
                  s7 = s8;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseNode();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c185(s1, s3, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parseStrandExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 48 + 46,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsePhraseExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsePerspectiveExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parseNode();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseSpace();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c187(s1);
        }
        s3 = s4;
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseSpace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c187(s1);
          }
          s3 = s4;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$currPos;
          s7 = peg$parseSpace();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s6;
            s7 = peg$c187(s1);
          }
          s6 = s7;
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$currPos;
            s7 = peg$parseSpace();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s6;
              s7 = peg$c187(s1);
            }
            s6 = s7;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseTransformationOperator();
            if (s6 !== peg$FAILED) {
              s7 = [];
              s8 = peg$currPos;
              s9 = peg$parseSpace();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s8;
                s9 = peg$c188(s1, s6);
              }
              s8 = s9;
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$currPos;
                s9 = peg$parseSpace();
                if (s9 !== peg$FAILED) {
                  peg$savedPos = s8;
                  s9 = peg$c188(s1, s6);
                }
                s8 = s9;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parseNode();
                if (s8 === peg$FAILED) {
                  s8 = peg$parseStrandExpression();
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c189(s1, s6, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parseSpace();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c187(s1);
              }
              s6 = s7;
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parseSpace();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c187(s1);
                }
                s6 = s7;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTransformationOperator();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$currPos;
                  s9 = peg$parseSpace();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s8;
                    s9 = peg$c188(s1, s6);
                  }
                  s8 = s9;
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$currPos;
                    s9 = peg$parseSpace();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s8;
                      s9 = peg$c188(s1, s6);
                    }
                    s8 = s9;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseNode();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parseStrandExpression();
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s5 = peg$c189(s1, s6, s8);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c190(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    function peg$parsePhraseExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 48 + 47,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseDomain();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEssence();
        if (s1 === peg$FAILED) {
          s1 = peg$parseConcept();
          if (s1 === peg$FAILED) {
            s1 = peg$parseGroup();
            if (s1 === peg$FAILED) {
              s1 = peg$parseNumberNode();
              if (s1 === peg$FAILED) {
                s1 = peg$parsePhraseNode();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseStringNode();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseAnchorNode();
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        if (peg$c9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c10); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDomain();
          if (s5 === peg$FAILED) {
            s5 = peg$parseEssence();
            if (s5 === peg$FAILED) {
              s5 = peg$parseConcept();
              if (s5 === peg$FAILED) {
                s5 = peg$parseGroup();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseNumberNode();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsePhraseNode();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseStringNode();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseAnchorNode();
                      }
                    }
                  }
                }
              }
            }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c192(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = [];
            if (peg$c9.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c9.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseDomain();
              if (s5 === peg$FAILED) {
                s5 = peg$parseEssence();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseConcept();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseGroup();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseNumberNode();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parsePhraseNode();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parseStringNode();
                          if (s5 === peg$FAILED) {
                            s5 = peg$parseAnchorNode();
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c192(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c193(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    function spwHead() {
        var _cache = new Map();
        /**
         * add the usual things to a node, remove missteps
         * @param node
         */
        function normalize(
        // @ts-ignore
        node) {
            return Object.assign({
                src: text(),
                location: location(),
            }, Object.fromEntries(Object
                .entries(node)
                .filter(function (e) {
                var k = e[0];
                var v = e[1];
                return k === 'key' ? true : v !== undefined;
            })));
        }
        /**
         * Convert a node to a {@see SpwConstruct } SpwConstruct initializer
         * @param node
         */
        function toSpwItem(
        // @ts-ignore
        node) {
            if (typeof location === 'undefined')
                return;
            if (!node.kind)
                throw new Error('No node kind specified');
            var cacheKey = JSON.stringify(location());
            if (_cache.has(cacheKey))
                return _cache.get(cacheKey);
            var out = normalize(node);
            _cache.set(cacheKey, out);
            return out;
        }
        /** Actions **/
        var constructs = {
            space: function spaceNodeAction() { return toSpwItem({ kind: 'space' }); },
        };
        return {
            toSpwItem: toSpwItem,
            constructs: constructs,
        };
    };
        var head       = spwHead();
        var toSpwItem  = head.toSpwItem;
        var constructs = head.constructs;


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
export default generatedParser;
export {generatedParser as spwParser};